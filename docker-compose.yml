version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: db_breizsport_order
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: symfony_breizhsport_order
      MYSQL_USER: symfony
      MYSQL_PASSWORD: symfony
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - symfony_network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_symfony
    restart: always
    depends_on:
      - db
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_USER: symfony
      PMA_PASSWORD: symfony
    networks:
      - symfony_network

  www:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: www_symfony
    restart: always
    ports:
      - "8001:80"
    volumes:
      - ./:/var/www/html
      - ./docker/vhosts:/etc/apache2/sites-enabled
    networks:
      - symfony_network
    depends_on:
      - db
      - rabbitmq

  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"  # Port pour l'interface de gestion RabbitMQ
      - "5672:5672"    # Port pour les connexions RabbitMQ
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - symfony_network

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

networks:
  symfony_network:
    driver: bridge

volumes:
  db-data:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
